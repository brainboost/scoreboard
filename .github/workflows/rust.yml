name: Rust

on:
  push:
    branches: [ "main" ]
    paths: [ "package.json" ]

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: install app dependencies and build it
        run: yarn && yarn tauri build
      - uses: JonasKruckenberg/tauri-build@v1
        id: tauri_build
      - uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: "${{ join(fromJSON(steps.tauri_build.outputs.artifacts), '\n') }}"

  create-release:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v2
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `Desktop App v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app',
              draft: true,
              prerelease: false
            })
            return data.id

  publish-release:
    needs: [ create-release, build ]
    runs-on: ubuntu-latest
    steps:
    - name: üîÉ Checkout dist branch
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: üõéÔ∏è Create release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: v${process.env.PACKAGE_VERSION}
        artifacts: "./artifacts/**/*"
        draft: true

    # runs-on: ubuntu-latest
    # needs: [ create-release, build ]
    
    # steps:
    #   - uses: actions/checkout@v2
    #   - uses: actions/download-artifact@v3
    #     id: download
    #     with:
    #       name: artifacts
    #       path: artifacts
    #   - name: 'create release'
    #     uses: softprops/action-gh-release@master
    #     env:
    #       GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
    #     with:
    #       draft: false
    #       files: ./artifacts/**/*